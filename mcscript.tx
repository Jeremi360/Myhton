Script:
  Package
  imports *= Import
  name = MC
  using *= Use
  variables *= Variable
;

Keyword:
  'var'
  | 'int'
  | 'float'
  | 'bool'
  | 'list'
  | 'dict'
  | 'package'
  | 'import'
  | 'model'
  | 'controller'
  | 'use'
  | 'and'
  | 'or'
  | 'hide'
  | 'from'
  | 'as'
  | 'default'
  | 'if'
  | 'else'
  | 'for'
  | 'in'
  | 'while'
  | 'do'
  | 'break'
  | 'skip'
  | 'return'
  | 'true'
  | 'false'
  | 'null'
  | 'this'
  | 'on'
  | 'set'
  | 'get'
  | 'enum'
;

MyID: !Keyword ID;


Package:
  'package' name = MyID +['.'] '\n'
;

Import:
  'import' package = [Package] '\n'
  // |'from' package = [Package] 'import' MyID '\n'
;

MC:
  'def' ('model'|'controller') name = MyID '\n'
;

Use:
  'use' script = [MC] '\n'
;

Type:
  'int'
  | 'float'
  | 'bool'
  | mc = [MC]
;

ListType:
  'list''<'value = [Type]'>' 
;

DictType:
  'dict''<'key = [Type]',' value = [Type]'>' 
;

Expression:
  INT
  | FLOAT
  | BOOL
  | STRING
  | ('!'|'not') Expression
  | '-' Expression
  | Expression ('and'|'or') Expression
  | Expression ('&'|'|') Expression
  | v=[MC|Variable]+['.']
;

STATIC:
  (static?='static')
;

Var_Mod:
  (STATIC const?='const')
;

Variable:
  Var
  |Typed_Var
  | List
  | Dict
;

Var:
  ('const'| STATIC 'var') name=MyID (value?='='Expression) '\n'
;

Typed_Var:
  Var_Mod Type name=MyID (value?='='Expression) '\n'
;

List:
  ListType name=MyID (value?=':'(Expression+[' ']|Expression+[','])) 'end'
;

DictPair:
  key=Expression ':' value=Expression
;

Dict:
  DictType name=MyID (value?=':'(DictPair+[' ']|DictPair+[','])) 'end'
;

Func:
  STATIC ('def'|Type) name=MyID '(' args*=Variable+[','] ')'':'
  Expression+
  'end'
; 